import React, { useEffect, useMemo, useRef, useState } from "react";
const ROUTES = { HOME: "#", STORIES: "#stories", FUN: "#fun" };
const useHashRoute = () => {
  const [hash, setHash] = useState(window.location.hash || "#");
  useEffect(() => {
    const onHash = () => setHash(window.location.hash || "#");
    window.addEventListener("hashchange", onHash);
    return () => window.removeEventListener("hashchange", onHash);
  }, []);
  return hash || "#";
};
const STORAGE_KEY = "prism_stories_v1";
const loadStories = () => { try { const raw = localStorage.getItem(STORAGE_KEY); return raw? JSON.parse(raw): []; } catch { return []; } };
const saveStories = (items) => { try { localStorage.setItem(STORAGE_KEY, JSON.stringify(items)); } catch {} };

function PrismLogo({ size = 28 }) {
  return (
    <div className="flex items-center gap-2 select-none">
      <svg width={size} height={size} viewBox="0 0 64 64" aria-hidden className="drop-shadow-[0_0_8px_rgba(99,102,241,0.5)]">
        <polygon points="32,6 58,54 6,54" className="fill-transparent stroke-indigo-400" strokeWidth="2" />
        <line x1="0" y1="22" x2="28" y2="28" className="stroke-slate-300" strokeWidth="2" />
        <line x1="36" y1="30" x2="64" y2="18" className="stroke-rose-400" strokeWidth="2" />
        <line x1="36" y1="32" x2="64" y2="32" className="stroke-emerald-400" strokeWidth="2" />
        <line x1="36" y1="34" x2="64" y2="46" className="stroke-cyan-400" strokeWidth="2" />
      </svg>
      <span className="text-xl sm:text-2xl font-semibold tracking-[0.08em] text-slate-100">Prism</span>
    </div>
  );
}

function Shell({ children }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-black text-slate-100">
      <div className="pointer-events-none fixed inset-0 [background-image:radial-gradient(rgba(99,102,241,0.08)_1px,transparent_1px)] [background-size:24px_24px] opacity-40" />
      <div className="max-w-5xl mx-auto px-4 pb-24">
        <Header />
        {children}
        <Footer />
      </div>
    </div>
  );
}

function Header() {
  return (
    <header className="sticky top-0 z-10 backdrop-blur supports-[backdrop-filter]:bg-white/5 bg-white/0 border-b border-white/10">
      <div className="max-w-5xl mx-auto px-4">
        <div className="flex items-center justify-between py-3">
          <PrismLogo />
          <nav className="flex gap-2">
            <a href={ROUTES.HOME} className="px-3 py-1.5 rounded-xl text-slate-200 hover:text-white hover:bg-white/10 transition">Home</a>
            <a href={ROUTES.STORIES} className="px-3 py-1.5 rounded-xl text-slate-200 hover:text-white hover:bg-white/10 transition">Stories</a>
            <a href={ROUTES.FUN} className="px-3 py-1.5 rounded-xl text-slate-200 hover:text-white hover:bg-white/10 transition">Fun</a>
          </nav>
        </div>
      </div>
    </header>
  );
}

function Footer() {
  return (
    <footer className="mt-16 text-sm text-slate-400 flex items-center justify-between">
      <p>© {new Date().getFullYear()} Prism. Forged in the void.</p>
      <p className="opacity-75">Alien‑sleek starter · No backend · Free deploy</p>
    </footer>
  );
}

function Home() {
  return (
    <main className="pt-10">
      <section className="grid gap-6 sm:grid-cols-2">
        <BigTile
          title="Stories"
          href={ROUTES.STORIES}
          desc="Write and read entries. Saved locally; no login. Sorted by pen name & date."
          icon={(<svg viewBox="0 0 24 24" className="w-8 h-8">
            <path className="fill-slate-200" d="M4 4h13a3 3 0 0 1 3 3v11.5a.5.5 0 0 1-.8.4L16 17H6a2 2 0 0 1-2-2V4z"/>
            <path className="fill-indigo-400" d="M7 7h9v2H7zM7 11h9v2H7zM7 15h6v2H7z"/>
          </svg>)}
        />
        <BigTile
          title="Fun"
          href={ROUTES.FUN}
          desc="Playground of tiny toys. Eyeballs watch your cursor."
          icon={(<svg viewBox="0 0 24 24" className="w-8 h-8">
            <circle cx="12" cy="12" r="9" className="fill-slate-200"/>
            <circle cx="12" cy="12" r="4" className="fill-indigo-500"/>
          </svg>)}
        />
      </section>

      <section className="mt-10">
        <Card title="Look & Feel" subtitle="Inside an alien spaceship">
          <p className="text-slate-300 leading-relaxed">
            This theme uses glassy panels, neon glows, and star‑field grids to nail the
            “refined alien cruiser” vibe. Tweak colors in Tailwind classes to taste.
          </p>
        </Card>
      </section>
    </main>
  );
}

function BigTile({ title, desc, href, icon }) {
  return (
    <a href={href} className="group relative overflow-hidden rounded-2xl border border-white/10 bg-white/5 p-6 hover:bg-white/[0.08] transition shadow-[inset_0_1px_0_rgba(255,255,255,0.06)]">
      <div className="absolute -right-6 -top-6 h-28 w-28 rounded-full bg-indigo-500/20 blur-2xl" />
      <div className="flex items-start gap-4">
        <div className="shrink-0 opacity-80 group-hover:opacity-100 transition">{icon}</div>
        <div>
          <h3 className="text-xl font-semibold tracking-wide">{title}</h3>
          <p className="text-slate-300 mt-1">{desc}</p>
          <span className="inline-block mt-4 text-indigo-300 group-hover:text-indigo-200">Open →</span>
        </div>
      </div>
    </a>
  );
}

function Card({ title, subtitle, children, actions }) {
  return (
    <div className="rounded-2xl border border-white/10 bg-white/[0.04] p-6 shadow-[inset_0_1px_0_rgba(255,255,255,0.06)]">
      <div className="flex items-start justify-between gap-4">
        <div>
          <h4 className="text-lg font-semibold text-slate-100">{title}</h4>
          {subtitle && <p className="text-slate-400 mt-0.5">{subtitle}</p>}
        </div>
        {actions}
      </div>
      <div className="mt-4">{children}</div>
    </div>
  );
}

function Stories() {
  const [items, setItems] = useState(() => loadStories());
  const [pen, setPen] = useState("");
  const [text, setText] = useState("");

  const sorted = useMemo(() => {
    return [...items].sort((a, b) => {
      const penCmp = a.pen.localeCompare(b.pen, undefined, { sensitivity: "base" });
      if (penCmp !== 0) return penCmp;
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    });
  }, [items]);

  const add = (e) => {
    e.preventDefault();
    if (!pen.trim() || !text.trim()) return;
    const entry = { id: crypto.randomUUID(), pen: pen.trim(), text: text.trim(), date: new Date().toISOString() };
    const next = [entry, ...items];
    setItems(next);
    saveStories(next);
    setText("");
  };

  const clearAll = () => {
    if (confirm("Clear all local stories?")) {
      setItems([]);
      saveStories([]);
    }
  };

  return (
    <main className="pt-10 space-y-8">
      <Card title="Write a story" subtitle="Pick a pen name per post; entries sort by name & date" actions={
        <button onClick={clearAll} className="px-3 py-1.5 rounded-xl bg-rose-600/80 hover:bg-rose-600 text-white text-sm">Clear all</button>
      }>
        <form onSubmit={add} className="grid sm:grid-cols-5 gap-3">
          <input placeholder="Pen name" className="sm:col-span-2 px-3 py-2 rounded-xl bg-black/40 border border-white/15 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            value={pen} onChange={(e) => setPen(e.target.value)} maxLength={40} />
          <textarea placeholder="Share a thought, a micro‑story, a poem…" className="sm:col-span-3 min-h-[90px] px-3 py-2 rounded-xl bg-black/40 border border-white/15 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            value={text} onChange={(e) => setText(e.target.value)} maxLength={5000} />
          <div className="sm:col-span-5 flex justify-end">
            <button className="px-4 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-500 text-white font-medium">Post</button>
          </div>
        </form>
      </Card>

      <Card title="Community feed" subtitle={`${sorted.length} entr${sorted.length===1?"y":"ies"}`}>
        <ul className="space-y-4">
          {sorted.map((it) => (
            <li key={it.id} className="rounded-xl border border-white/10 bg-white/[0.04] p-4">
              <div className="flex items-center justify-between gap-3">
                <div className="text-indigo-300 font-semibold tracking-wide">{it.pen}</div>
                <time className="text-sm text-slate-400" dateTime={it.date}>
                  {new Date(it.date).toLocaleString()}
                </time>
              </div>
              <p className="text-slate-200 mt-2 whitespace-pre-wrap leading-relaxed">{it.text}</p>
            </li>
          ))}
          {sorted.length === 0 && (<p className="text-slate-400">No entries yet. Be the first to post!</p>)}
        </ul>
      </Card>
    </main>
  );
}

function Fun() {
  return (
    <main className="pt-10 space-y-8">
      <Card title="The Eyes" subtitle="They’ll follow your cursor…">
        <Eyes />
      </Card>
      <Card title="Mini‑toys" subtitle="Room for future games">
        <div className="grid sm:grid-cols-3 gap-4">
          <ToyCard title="Click‑Pulse" desc="Click to charge a pulse" buttonText="Charge" onClick={() => {
            const el = document.getElementById("pulse-field");
            if (!el) return;
            el.animate([{boxShadow:"0 0 0 0 rgba(99,102,241,0.0)"},{boxShadow:"0 0 0 24px rgba(99,102,241,0.35)"}],{duration:400, easing:"ease-out"});
          }} />
          <ToyCard title="Dice" desc="Random d6 roll" buttonText="Roll" onClick={() => alert(`You rolled a ${1+Math.floor(Math.random()*6)}!`)} />
          <ToyCard title="Color Drift" desc="Subtle neon shimmer" buttonText="Pulse grid" onClick={() => document.body.animate([{filter:"hue-rotate(0deg)"},{filter:"hue-rotate(45deg)"},{filter:"hue-rotate(0deg)"}],{duration:1200})} />
        </div>
        <div id="pulse-field" className="mt-6 h-12 rounded-xl border border-indigo-500/30" />
      </Card>
    </main>
  );
}

function ToyCard({ title, desc, buttonText, onClick }) {
  return (
    <div className="rounded-xl border border-white/10 bg-white/[0.04] p-4 flex flex-col">
      <div>
        <h5 className="font-semibold">{title}</h5>
        <p className="text-slate-400 text-sm mt-1">{desc}</p>
      </div>
      <button onClick={onClick} className="mt-4 self-start px-3 py-1.5 rounded-lg bg-indigo-600 hover:bg-indigo-500 text-white text-sm">{buttonText}</button>
    </div>
  );
}

function Eyes() {
  const wrapRef = useRef(null);
  const [pos, setPos] = useState({ x: 0, y: 0 });
  useEffect(() => {
    const onMove = (e) => {
      const rect = wrapRef.current?.getBoundingClientRect();
      const x = e.clientX - (rect?.left ?? 0);
      const y = e.clientY - (rect?.top ?? 0);
      setPos({ x, y });
    };
    window.addEventListener("mousemove", onMove);
    return () => window.removeEventListener("mousemove", onMove);
  }, []);
  return (
    <div ref={wrapRef} className="relative h-48 sm:h-56 grid place-items-center">
      <div className="flex items-center gap-6">
        <Eye target={pos} />
        <Eye target={pos} />
      </div>
    </div>
  );
}

function Eye({ target }) {
  const eyeRef = useRef(null);
  const [center, setCenter] = useState({ x: 0, y: 0 });
  useEffect(() => {
    const updateCenter = () => {
      const rect = eyeRef.current?.getBoundingClientRect();
      if (!rect) return;
      setCenter({ x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 });
    };
    updateCenter();
    window.addEventListener("resize", updateCenter);
    return () => window.removeEventListener("resize", updateCenter);
  }, []);
  const dx = (target.x + window.scrollX) - center.x;
  const dy = (target.y + window.scrollY) - center.y;
  const angle = Math.atan2(dy, dx);
  const max = 10;
  const px = Math.cos(angle) * max;
  const py = Math.sin(angle) * max;
  return (
    <div ref={eyeRef} className="relative h-28 w-28 rounded-full bg-white/90 border border-white/30 shadow-2xl overflow-hidden" style={{ boxShadow: "inset 0 8px 30px rgba(0,0,0,0.35), 0 2px 30px rgba(99,102,241,0.35)" }}>
      <div className="absolute inset-0 [background:radial-gradient(circle_at_50%_30%,rgba(226,232,240,0.9),rgba(203,213,225,0.8),transparent_70%)]" />
      <div className="absolute top-1/2 left-1/2 h-10 w-10 -translate-x-1/2 -translate-y-1/2 rounded-full bg-indigo-900" style={{ transform: `translate(calc(-50% + ${px}px), calc(-50% + ${py}px))` }}>
        <div className="absolute inset-1 rounded-full bg-indigo-600" />
        <div className="absolute top-1 left-2 h-2 w-2 rounded-full bg-white/90" />
      </div>
    </div>
  );
}

export default function App() {
  const route = useHashRoute();
  let page;
  if (route === ROUTES.STORIES) page = <Stories />;
  else if (route === ROUTES.FUN) page = <Fun />;
  else page = <Home />;
  return <Shell>{page}</Shell>;
}

import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'
import './index.css'
createRoot(document.getElementById('root')).render(<App />)

@tailwind base;
@tailwind components;
@tailwind utilities;
